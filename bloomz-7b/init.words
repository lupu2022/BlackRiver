;
;   global define
;   

"model/weights/"   "MSG_FILES_PATH"    !

250880                  "VOCAB_SIZE"            !
4096                    "HIDDEN_SIZE"           !
32                      "HEADS_NUM"             !
128                     "HEAD_HIDDEN"           !

1e-05                   "LN_EPS"                !

"HIDDEN_SIZE" @ 3 *     "HIDDEN_SIZE_x3"        !
"HIDDEN_SIZE" @ 4 *     "HIDDEN_SIZE_x4"        !
"HIDDEN_SIZE" @ 5 *     "HIDDEN_SIZE_x5"        !
"HIDDEN_SIZE" @ dup *   "HIDDEN_SQUARE"         ! 

%def create_output
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.bias"    !
    
    ("VOCAB_SIZE" @ "HIDDEN_SIZE" @ 2 $DEVICE @) "float"  op.create "lm_head.weight" !
    
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.weight_g"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.bias_g"    !

    ("VOCAB_SIZE" @ "HIDDEN_SIZE" @ 2 $DEVICE @) "float"  op.create "lm_head.weight_g" !

%end

%def create_weight
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create      "word_embeddings_layernorm.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create      "word_embeddings_layernorm.bias"    !

    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create      "input_layernorm.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create      "input_layernorm.bias"    !

    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create  "post_attention_layernorm.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create  "post_attention_layernorm.bias"    !

    ("HIDDEN_SIZE_x3" @  "HIDDEN_SIZE" @ 2 $DEVICE @)  "float"  op.create     "query_key_value.weight"  !
    ("HIDDEN_SIZE_x3" @  1 $DEVICE @) "float"  op.create                      "query_key_value.bias"    !

    ;
    ; dummy split to three tensors, 4096 * 4096 = 16777216
    ;
    ("query_key_value.weight" @ 0                       "HIDDEN_SIZE" @ dup 2 op.view)    "query.weight" !
    ("query_key_value.weight" @ "HIDDEN_SQUARE" @       "HIDDEN_SIZE" @ dup 2 op.view)    "key.weight" !          
    ("query_key_value.weight" @ ("HIDDEN_SQUARE" @ 2 *) "HIDDEN_SIZE" @ dup 2 op.view)    "value.weight" !

    ("query_key_value.bias" @ 0                     "HIDDEN_SIZE" @ 1 op.view) "query.bias" !
    ("query_key_value.bias" @ "HIDDEN_SIZE" @       "HIDDEN_SIZE" @ 1 op.view) "key.bias"   !
    ("query_key_value.bias" @ ("HIDDEN_SIZE" @ 2 *) "HIDDEN_SIZE" @ 1 op.view) "value.bias" !

    ("HIDDEN_SIZE" @ dup 2 $DEVICE @) "float"  op.create                "dense.weight"  !
    ("HIDDEN_SIZE" @ 1 $DEVICE @) "float"  op.create                    "dense.bias"    !

    ("HIDDEN_SIZE_x4" @  "HIDDEN_SIZE" @ 2 $DEVICE @)  "float"  op.create     "dense_h_to_4h.weight"  !
    ("HIDDEN_SIZE_x4" @  1 $DEVICE @) "float"  op.create                       "dense_h_to_4h.bias"    !

    ("HIDDEN_SIZE" @  "HIDDEN_SIZE_x4" @ 2 $DEVICE @)  "float"  op.create     "dense_4h_to_h.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create                       "dense_4h_to_h.bias"    !

    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.weight"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.bias"    !
%end

%def create_grad
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create                       "input_layernorm.weight_g"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create                       "input_layernorm.bias_g"    !

    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create  "post_attention_layernorm.weight_g"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create  "post_attention_layernorm.bias_g"    !

    ("HIDDEN_SIZE_x3" @  "HIDDEN_SIZE" @ 2 $DEVICE @)  "float"  op.create     "query_key_value.weight_g"  !
    ("HIDDEN_SIZE_x3" @  1 $DEVICE @) "float"  op.create                       "query_key_value.bias_g"    !

    ("query_key_value.weight_g" @ 0                        "HIDDEN_SIZE" @ dup 2 op.view)    "query.weight_g" !
    ("query_key_value.weight_g" @ "HIDDEN_SQUARE" @        "HIDDEN_SIZE" @ dup 2 op.view)    "key.weight_g" !          
    ("query_key_value.weight_g" @ ("HIDDEN_SQUARE" @ 2 *)  "HIDDEN_SIZE" @ dup 2 op.view)    "value.weight_g" !

    ("query_key_value.bias_g" @ 0                      "HIDDEN_SIZE" @ 1 op.view) "query.bias_g" !
    ("query_key_value.bias_g" @ "HIDDEN_SIZE" @        "HIDDEN_SIZE" @ 1 op.view) "key.bias_g"   !
    ("query_key_value.bias_g" @ ("HIDDEN_SIZE" @ 2 *)  "HIDDEN_SIZE" @ 1 op.view) "value.bias_g" !

    ("HIDDEN_SIZE" @ dup 2 $DEVICE @) "float"  op.create                "dense.weight_g"  !
    ("HIDDEN_SIZE" @ 1 $DEVICE @) "float"  op.create                    "dense.bias_g"    !

    ("HIDDEN_SIZE_x4" @  "HIDDEN_SIZE" @ 2 $DEVICE @)  "float"  op.create     "dense_h_to_4h.weight_g"  !
    ("HIDDEN_SIZE_x4" @  1 $DEVICE @) "float"  op.create                       "dense_h_to_4h.bias_g"    !

    ("HIDDEN_SIZE" @  "HIDDEN_SIZE_x4" @ 2 $DEVICE @)  "float"  op.create     "dense_4h_to_h.weight_g"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create                       "dense_4h_to_h.bias_g"    !

    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.weight_g"  !
    ("HIDDEN_SIZE" @  1 $DEVICE @) "float"  op.create     "ln_f.bias_g"    !
%end

%def create_var
    1 "cuda" "float"  op.create  "_var_"     !
   
    16 2048 *             1 "cpu"  "int"  op.create  "_ids_"     !
    16 2048 *             1 "cpu"  "int"  op.create  "_mask_"    !
    "HEADS_NUM" @ 2048 *  1 "cpu"  "float"  op.create  "_alibi_"   !
    16 2048 2048 * *      1 "cpu"  "float"  op.create  "_xmask_"   !   
    16 2048 4096 *        1 "cpu"  "float"  op.create  "_xinput_"  !   
%end

%def create_dynamic
    0 #

    $tokens !
    $batch  !

    
    "_ids_" @ 0  $batch @   $tokens @  2 op.view  "ids_" !

    "_mask_" @ 0  $batch @   $tokens @  2 op.view  "mask_" !

    ;; xinput in GPU, xinput_ in CPU
    {
        "_var_"    @ 0  $batch @   $tokens @  "HIDDEN_SIZE" @ 3 op.view  "xinput" !
        "_xinput_" @ 0  $batch @   $tokens @  "HIDDEN_SIZE" @ 3 op.view  "xinput_" !

        $batch @ $tokens @ "HIDDEN_SIZE" @ * * 
    }
   
    ;; alibi in GPU, alibi_ in CPU
    {
        dup
        "_var_" @ swap  1 "HEADS_NUM" @ 1 $tokens @  4 op.view   "alibi" ! 
        "_alibi_" @ 0   1 "HEADS_NUM" @ 1 $tokens @  4 op.view   "alibi_" ! 
    
        "HEADS_NUM" @ $tokens @ * +  
    }

    ;; xmask in GPU, xmask_ in CPU
    {
        dup
        "_var_" @ swap $batch @ 1 $tokens @  $tokens @  4 op.view   "xmask"  ! 
        "_xmask_" @ 0  $batch @ 1 $tokens @  $tokens @  4 op.view   "xmask_" ! 
    
        $batch @ $tokens @ $tokens @ * * +
    }

    ;; xa, xb, xc, xd, xe
    {
        dup  

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xa" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "ya" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "za" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +
        
        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xb" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yb" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zb" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xc" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yc" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zc" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +
        
        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xd" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yd" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zd" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +
        
        dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xe" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "ye" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "ze" !
    }
    
    ;; x3a x3b
    {
        dup

        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE_x3" @ 3 op.view "x3a" !
        dup $batch @ $tokens @ "HIDDEN_SIZE_x3" @  * * +


        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE_x3" @ 3 op.view "x3b" !
    }
   
    ;; x4a x4b x5a
    {
        dup

        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE_x4" @ 3 op.view "x4a" !
        dup $batch @ $tokens @ "HIDDEN_SIZE_x4" @  * * +
 
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE_x4" @ 3 op.view "x4b" !

        dup 
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE_x5" @ 3 op.view "x5a" !
    }
 

    ;; output logits 
    {
        dup

        "_var_" @ swap $batch @ "VOCAB_SIZE" @ 2 op.view "last_logits" !
        
    }

    ;; larget memroy
    {
        $batch @ $tokens @ "HIDDEN_SIZE" @ 5 * * * +

        dup
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ $tokens @ 4 op.view "xll" !
        "_var_" @ swap "VOCAB_SIZE" @ "HIDDEN_SIZE" @ 2 op.view "lm_head.weight" !
    }
    
    $tokens !!
    $batch !!

%end



%def zero_grad
    "input_layernorm.weight_g" @  op.zero
    "input_layernorm.bias_g" @ op.zero
    
    "query_key_value.weight_g" @  op.zero
    "query_key_value.bias_g" @ op.zero
    
    "dense.weight_g" @ op.zero
    "dense.bias_g" @ op.zero
    
    "dense_h_to_4h.weight_g" @ op.zero
    "dense_h_to_4h.bias_g" @ op.zero
    
    "dense_4h_to_h.weight_g" @ op.zero
    "dense_4h_to_h.bias_g" @ op.zero
    
    "post_attention_layernorm.weight_g" @ op.zero
    "post_attention_layernorm.bias_g" @   op.zero
%end

%def load_weight
    dup 
    ">>>Begin load weight..." swap |  echo

    "header" !
     
    {
        "word_embeddings_layernorm.weight" @
        "MSG_FILES_PATH" @  "word_embeddings_layernorm.weight.bin"  | 
        io.load
        
        "word_embeddings_layernorm.bias" @
        "MSG_FILES_PATH" @  "word_embeddings_layernorm.bias.bin"  | 
        io.load
    }

    {
        "input_layernorm.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".input_layernorm.weight.bin" | 
        io.load
   
        "input_layernorm.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".input_layernorm.bias.bin" | 
        io.load
    }

    {
        "query_key_value.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".query_key_value.weight.bin" | 
        io.load
   
        "query_key_value.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".query_key_value.bias.bin" | 
        io.load
    }

    {
        "dense.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".dense.weight.bin" | 
        io.load
   
        "dense.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".dense.bias.bin" | 
        io.load
    }

    {
        "dense_h_to_4h.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".dense_h_to_4h.weight.bin" | 
        io.load
   
        "dense_h_to_4h.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".dense_h_to_4h.bias.bin" | 
        io.load
    }
    
    {
        "dense_4h_to_h.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".dense_4h_to_h.weight.bin" | 
        io.load
   
        "dense_4h_to_h.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".dense_4h_to_h.bias.bin" | 
        io.load
    }

    {
        "post_attention_layernorm.weight" @
        "MSG_FILES_PATH" @  "header" @  | ".post_attention_layernorm.weight.bin" | 
        io.load
   
        "post_attention_layernorm.bias" @
        "MSG_FILES_PATH" @  "header" @  | ".post_attention_layernorm.bias.bin" | 
        io.load
    }

    "header" !!


    ">>>End load weight..." echo
%end


%def load_output
    ">>>Begin load output ..." echo   
   
    {
        "ln_f.weight" @ 
        "MSG_FILES_PATH" @  "ln_f.weight.bin" | 
        io.load

        "ln_f.bias" @
        "MSG_FILES_PATH" @  "ln_f.bias.bin" | 
        io.load
    }

    "lm_head.weight" @
    "MSG_FILES_PATH" @  "lm_head.weight.bin" | 
    io.load

    ">>>End load output ..." echo   
%end

%def sync_output
    dup 

    0 # "ln_f.weight" @ 
    swap # "ln_f.weight" @ op.copy 
    dup    

    0 # "ln_f.bias" @ 
    swap # "ln_f.bias" @ op.copy 
    
    0 # "lm_head.weight" @
    swap # "lm_head.weight" @ op.copy 

%end


%def sync
    ">>>Begin sync with GPU..." echo
    dup
 
    0 #        "word_embeddings_layernorm.weight" @  
    swap #     "word_embeddings_layernorm.weight" @  op.copy
    dup
  
    0 #        "word_embeddings_layernorm.bias" @
    swap #     "word_embeddings_layernorm.bias" @    op.copy 
    dup

    0 #        "input_layernorm.weight" @  
    swap #     "input_layernorm.weight" @  op.copy
    dup
  
    0 #        "input_layernorm.bias" @
    swap #     "input_layernorm.bias" @    op.copy 
    dup

    0 #        "query_key_value.weight" @
    swap #     "query_key_value.weight" @  op.copy
    dup

    0 #        "query_key_value.bias" @
    swap #     "query_key_value.bias" @    op.copy
    dup

    0 #        "dense.weight" @
    swap #     "dense.weight" @            op.copy
    dup  

    0 #        "dense.bias" @
    swap #     "dense.bias" @              op.copy
    dup

    0 #        "dense_h_to_4h.weight" @
    swap #     "dense_h_to_4h.weight" @    op.copy
    dup  

    0 #        "dense_h_to_4h.bias" @
    swap #     "dense_h_to_4h.bias" @      op.copy
    dup

    0 #        "dense_4h_to_h.weight" @
    swap #     "dense_4h_to_h.weight" @    op.copy
    dup    

    0 #        "dense_4h_to_h.bias" @
    swap #     "dense_4h_to_h.bias" @      op.copy
    dup
  
    0 #        "post_attention_layernorm.weight" @
    swap #     "post_attention_layernorm.weight" @  op.copy

    0 #        "post_attention_layernorm.bias" @
    swap #     "post_attention_layernorm.bias" @    op.copy

    ;op.sync
    
    ">>>End sync with GPU..." echo
%end


